package memberUI;

import java.awt.BorderLayout;
import java.awt.FlowLayout;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import UI.MemberUI;
import core.Group_exercise_log;
import core.Individual_exercise_log;
import jdbc.GymDAO;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.RowSpec;
import com.jgoodies.forms.layout.FormSpecs;
import javax.swing.JLabel;
import com.github.lgooddatepicker.components.TimePicker;
import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class MemGrpActDialogue extends JDialog {

	private final JPanel contentPanel = new JPanel();
	
	private MemberUI memberUI;
	private GymDAO gymDAO;
	
	private Group_exercise_log previousLog;
	private boolean updateMode = false;
	private JTextField textFieldTitle;

	/**
	 * Launch the application.
	 */
	public MemGrpActDialogue(MemberUI theMemberUI, GymDAO theGymDAO, Group_exercise_log previousLog, Boolean updateMode) {
		this();
		memberUI = theMemberUI;
		gymDAO = theGymDAO;
		this.previousLog = previousLog;
		this.updateMode = updateMode;
		if (updateMode) {
			setTitle("Add individual activity");
			populateGui(previousLog);
		}
	}
	
	private void populateGui(Group_exercise_log previousLog) {
		textFieldTitle.setText(previousLog.getTitle());
		timePickerStart.setText(previousLog.getStart_time().toString());
		timePickerEnd.setText(previousLog.getEnd_time().toString());
	}

	/**
	 * Create the dialog.
	 */
	public MemGrpActDialogue() {
		setTitle("Add Group Activity");
		setBounds(100, 100, 450, 184);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		contentPanel.setLayout(new FormLayout(new ColumnSpec[] {
				FormSpecs.RELATED_GAP_COLSPEC,
				FormSpecs.DEFAULT_COLSPEC,
				FormSpecs.RELATED_GAP_COLSPEC,
				ColumnSpec.decode("default:grow"),},
			new RowSpec[] {
				FormSpecs.RELATED_GAP_ROWSPEC,
				FormSpecs.DEFAULT_ROWSPEC,
				FormSpecs.RELATED_GAP_ROWSPEC,
				RowSpec.decode("default:grow"),
				FormSpecs.RELATED_GAP_ROWSPEC,
				RowSpec.decode("default:grow"),}));
		{
			JLabel lblTitle = new JLabel("Title:");
			contentPanel.add(lblTitle, "2, 2, right, default");
		}
		{
			textFieldTitle = new JTextField();
			contentPanel.add(textFieldTitle, "4, 2, fill, default");
			textFieldTitle.setColumns(10);
		}
		{
			JLabel lblStartTime = new JLabel("Start time:");
			contentPanel.add(lblStartTime, "2, 4");
		}
		{
			TimePicker timePickerStart = new TimePicker();
			contentPanel.add(timePickerStart, "4, 4, fill, fill");
		}
		{
			JLabel lblEndTime = new JLabel("End Time:");
			contentPanel.add(lblEndTime, "2, 6");
		}
		{
			TimePicker timePickerEnd = new TimePicker();
			contentPanel.add(timePickerEnd, "4, 6, fill, fill");
		}
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				JButton okButton = new JButton("OK");
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						
					}
				});
				okButton.setActionCommand("OK");
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				JButton cancelButton = new JButton("Cancel");
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						setVisible(false);
						dispose();
					}
				});
				cancelButton.setActionCommand("Cancel");
				buttonPane.add(cancelButton);
			}
		}
	}

}
